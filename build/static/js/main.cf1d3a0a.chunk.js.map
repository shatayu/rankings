{"version":3,"sources":["Pair/Pair.module.css","Ranker/Ranker.module.css","Input/Input.module.css","Constants.js","utils/sortUtils.js","Pair/Pair.js","utils/graphUtils.js","Ranker/Ranker.js","Input/Input.js","Results/Results.js","App.js","reportWebVitals.js","index.js","Results/Results.module.css"],"names":["module","exports","BETTER","WORSE","NOT_COMPARED","canCompare","a","b","comparisonGraph","Constants","isBetterThan","Pair","onSelection","willFlip","Math","random","left","right","className","styles","pair","Element","rendered","other","element","value","onClick","String","generateEmptyGraph","entries","temp","forEach","p1","p2","Ranker","onFinish","useState","questionsAsked","setQuestionsAsked","graph","setGraph","responses","setResponses","currentQuestion","setCurrentQuestion","questionNumber","setQuestionNumber","doneRanking","setDoneRanking","updateResponseGraph","useCallback","better","worse","tempResponses","updateTransitiveClosureGraph","tempGraph","list","closure","i","j","k","computeTransitiveClosure","useEffect","arr","sorted","slice","n","length","buffer","Array","size","leftStart","min","leftLimit","rightLimit","array","nextQuestion","iterativeMergeSort","container","ProgressIndicator","log","ceil","log2","maxNumberOfQuestions","progressIndicator","Input","onFinalizeEntries","setValue","setEntries","hasUserFinalizedRankings","setHasUserFinalizedRankings","listID","window","location","href","substr","lastIndexOf","getURI","axios","get","result","data","Item","putNewList","onSubmit","e","preventDefault","spaceLessValue","replace","map","term","includes","textboxContainer","type","textbox","placeholder","onChange","event","target","buttonContainer","button","enabledButton","disabledButton","width","height","viewBox","d","body","question","put","baseURL","copy","new_id","entryContainer","InputElement","onRemove","filter","entry","DeleteIcon","svgIcon","Results","results","selections","setSelections","pathBetweenSelections","setPathBetweenSelections","otherTerm","pop","push","firstTermIndex","indexOf","secondTermIndex","betterTermIndex","worseTermIndex","max","path","source","visited","team","parent","queue","current","shift","teamsCurrentIsBetterThan","reverse","shortestPath","pathArray","next","index","pathString","pathEntry","fillerExplanation","fillerJustification","style","textAlign","ResultElement","isSelected","justification","colorClasses","selectedElement","App","responsesGraph","setResponsesGraph","setResults","currentPage","setCurrentPage","pages","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,QAAU,wB,mBCAtDD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,kBAAoB,oC,kBCA5ED,EAAOC,QAAU,CAAC,UAAY,yBAAyB,iBAAmB,gCAAgC,QAAU,uBAAuB,gBAAkB,+BAA+B,OAAS,sBAAsB,eAAiB,8BAA8B,cAAgB,6BAA6B,eAAiB,8BAA8B,MAAQ,qBAAqB,QAAU,yB,qCCD7YD,EAAOC,QAAU,CACbC,OAAQ,EACRC,MAAO,EACPC,cAAe,I,2HC4DZ,SAASC,EAAWC,EAAGC,EAAGC,GAC7B,OAAOA,EAAgBF,GAAGC,KAAOE,IAAUL,aAOxC,SAASM,EAAaJ,EAAGC,EAAGC,GAC/B,OAAOA,EAAgBF,GAAGC,KAAOE,IAAUP,O,4BCtEhC,SAASS,EAAT,GAAoC,IAArBL,EAAoB,EAApBA,EAAGC,EAAiB,EAAjBA,EAAGK,EAAc,EAAdA,YAC1BC,EAAWC,KAAKC,SAAW,GAC3BC,EAAOH,EAAWP,EAAIC,EACtBU,EAAQJ,EAAWN,EAAID,EAC7B,OACI,sBAAKY,UAAWC,IAAOC,KAAvB,UACI,cAACC,EAAD,CAASC,SAAUN,EAAMO,MAAON,EAAOL,YAAaA,IACpD,cAACS,EAAD,CAASC,SAAUL,EAAOM,MAAOP,EAAMJ,YAAaA,OAMhE,SAASS,EAAT,GAAkD,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,MAAOX,EAAc,EAAdA,YAC/B,OAAO,sBACPM,UAAWC,IAAOK,QAClBC,MAAOH,EAAUI,QAAS,kBAAMd,EAAYU,EAAUC,IAF/C,SAGFI,OAAOL,KCIT,SAASM,EAAmBC,GAC/B,IAAIC,EAAO,GASX,OARAD,EAAQE,SAAQ,SAAAC,GACZF,EAAKE,GAAM,GAEXH,EAAQE,SAAQ,SAAAE,GACZH,EAAKE,GAAIC,GAAMxB,IAAUL,mBAI1B0B,E,qBCzBI,SAASI,EAAT,GAAsC,IAArBL,EAAoB,EAApBA,QAASM,EAAW,EAAXA,SACrC,EAA0CC,mBAAS,IAAnD,mBAAKC,EAAL,KAAqBC,EAArB,KACA,EAAwBF,mBAASR,EAAmBC,IAApD,mBAAKU,EAAL,KAAYC,EAAZ,KACA,EAAgCJ,mBAASR,EAAmBC,IAA5D,mBAAKY,EAAL,KAAgBC,EAAhB,KACA,EAA4CN,mBAAS,MAArD,mBAAKO,EAAL,KAAsBC,EAAtB,KACA,EAA0CR,mBAAS,GAAnD,mBAAKS,EAAL,KAAqBC,EAArB,KACA,EAAoCV,oBAAS,GAA7C,mBAAKW,EAAL,KAAkBC,EAAlB,KAGMC,EAAsBC,uBAAY,SAACC,EAAQC,GAC7C,IAAIC,EAAa,eACVZ,GAGPY,EAAcF,GAAQC,GAAS3C,IAAUP,OACzCmD,EAAcD,GAAOD,GAAU1C,IAAUN,MAEzCuC,EAAaD,KACd,CAACA,IAGEa,EAA+BJ,uBAAY,SAACC,EAAQC,GACtD,IAAIG,EAAS,eACNhB,GAGPgB,EAAUJ,GAAQC,GAAS3C,IAAUP,OACrCqD,EAAUH,GAAOD,GAAU1C,IAAUN,MAErCoD,EDlCD,SAAkChB,EAAOiB,GAC5C,IAAIC,EAAU7B,EAAmB4B,GAEjC,IAAK,IAAME,KAAKnB,EACZ,IAAK,IAAMoB,KAAKpB,EACZkB,EAAQC,GAAGC,GAAKpB,EAAMmB,GAAGC,GAIjC,IAAK,IAAMC,KAAKrB,EACZ,IAAK,IAAMmB,KAAKnB,EACZ,IAAK,IAAMoB,KAAKpB,EACZkB,EAAQC,GAAGC,GAAMF,EAAQC,GAAGC,KAAOlD,IAAUP,QAAYuD,EAAQC,GAAGE,KAAOnD,IAAUP,QAAUuD,EAAQG,GAAGD,KAAOlD,IAAUP,OAAUO,IAAUP,OAASqC,EAAMmB,GAAGC,GAK7K,OAAOF,ECiBSI,CAAyBN,EAAW1B,GAChDW,EAASe,KACV,CAAC1B,EAASU,IAGP3B,EAAcsC,uBAAY,SAACC,EAAQC,GACrCH,EAAoBE,EAAQC,GAC5BE,EAA6BH,EAAQC,GACrCd,EAAkB,GAAD,mBAAKD,GAAL,CAAqB,CAACc,EAAQC,MAC/CN,EAAkBD,EAAiB,KACpC,CAACA,EAAgBR,EAAgBY,EAAqBK,IAczD,OAXAQ,qBAAU,WACN,MHjDD,SAA4BC,EAAKvD,GAiBpC,IAJA,IAAIwD,EAASD,EAAIE,QACbC,EAAIF,EAAOG,OACXC,EAAS,IAAIC,MAAMH,GAEdI,EAAO,EAAGA,EAAOJ,EAAGI,GAAQ,EAAG,CACpC,IAAK,IAAIC,EAAY,EAAGA,EAAYL,EAAGK,GAAa,EAAID,EAAM,CAO1D,IANA,IAAItD,EAAOuD,EACPtD,EAAQH,KAAK0D,IAAIxD,EAAOsD,EAAMJ,GAC9BO,EAAYxD,EACZyD,EAAa5D,KAAK0D,IAAIvD,EAAQqD,EAAMJ,GACpCR,EAAI1C,EAEDA,EAAOyD,GAAaxD,EAAQyD,GAAY,CAC3C,IAAIrE,EAAW2D,EAAOhD,GAAOgD,EAAO/C,GAAQT,GAOxC,MAAO,CACHmE,MAAOX,EACPY,aAAc,CAACZ,EAAOhD,GAAOgD,EAAO/C,KARpCP,EAAasD,EAAOhD,GAAOgD,EAAO/C,GAAQT,GAC1C4D,EAAOV,KAAOM,EAAOhD,KAErBoD,EAAOV,KAAOM,EAAO/C,KAWjC,KAAOD,EAAOyD,GACVL,EAAOV,KAAOM,EAAOhD,KAGzB,KAAOC,EAAQyD,GACXN,EAAOV,KAAOM,EAAO/C,KAI7B,IAAIa,EAAOkC,EACXA,EAASI,EACTA,EAAStC,EAGb,MAAO,CACH6C,MAAOX,EACPY,aAAc,MGRcC,CAAmBhD,EAASU,GAAnDoC,EAAL,EAAKA,MAAOC,EAAZ,EAAYA,aAEQ,MAAhBA,EACAhC,EAAmB,cAACjC,EAAD,CAAML,EAAGsE,EAAa,GAAIrE,EAAGqE,EAAa,GAAIhE,YAAaA,MAE9EoC,GAAe,GACfb,EAASM,EAAWkC,EAAOtC,MAEhC,CAACE,EAAOM,EAAgBjC,EAAa6B,EAAWZ,EAASM,EAAUE,IAGlE,mCACI,sBAAKnB,UAAWC,IAAO2D,UAAvB,UACKnC,EACD,cAACoC,EAAD,CAAmBlC,eAAgBA,EAAgBqB,EAAGrC,EAAQsC,OAAQpB,YAAaA,SAMnG,SAASgC,EAAT,GAA8D,IAAlClC,EAAiC,EAAjCA,eAAgBqB,EAAiB,EAAjBA,EACxC,GADyD,EAAdnB,YAEvC,OAAO,KAIX,IAAMiC,EAAMlE,KAAKmE,KAAKnE,KAAKoE,KAAKhB,IAC1BiB,EAAuBjB,EAAIc,EAAJ,SAAU,EAAKA,GAAM,EAClD,OAAO,sBAAK9D,UAAWC,IAAOiE,kBAAvB,UAA2CvC,EAA3C,iBAAyEsC,K,8EC1ErE,SAASE,EAAT,GAAqC,IAArBC,EAAoB,EAApBA,kBAE3B,EAA0BlD,mBAAS,IAAnC,mBAAOX,EAAP,KAAc8D,EAAd,KACA,EAA8BnD,mBAAS,IAAvC,mBAAOP,EAAP,KAAgB2D,EAAhB,KACA,EAAgEpD,oBAAS,GAAzE,mBAAOqD,EAAP,KAAiCC,EAAjC,KAGA5B,qBAAU,WAAM,4CACZ,wCAAAxD,EAAA,4DACUqF,EAASC,OAAOC,SAASC,KAAKC,OAAOH,OAAOC,SAASC,KAAKE,YAAY,KAAO,IAExE7B,OAAS,GAHxB,uBAIc8B,EAAS,gEAAkEN,EAJzF,SAK6BO,IAAMC,IAAIF,GALvC,OAKcG,EALd,OAMc5C,EANd,oBAMqB4C,EAAOC,YAN5B,iBAMqB,EAAaC,YANlC,aAMqB,EAAmB9C,YANxC,QAMgD,GACxCgC,EAAWhC,GAPnB,4CADY,uBAAC,WAAD,wBAYZ+C,KACD,IAEHzC,qBAAU,WACF2B,GACAH,EAAkBzD,KAEvB,CAACA,EAAS4D,EAA0BH,IAEvC,IAAMkB,EAAWtD,uBAAY,SAACuD,EAAGhF,GAC7BgF,EAAEC,iBACF,IAAMC,EAAiBlF,EAAMmF,QAAQ,IAAK,KACrC/E,EAAQgF,KAAI,SAAAC,GAAI,OAAIA,EAAKF,QAAQ,IAAK,OAAKG,SAASJ,IAAmBA,EAAexC,OAAS,IAChGqB,EAAW,GAAD,mBAAK3D,GAAL,CAAcJ,KACxB8D,EAAS,OAEd,CAAC1D,IAEJ,OACI,sBAAKX,UAAWC,IAAO2D,UAAvB,UACI,qBAAK5D,UAAWC,IAAO6F,iBAAvB,SACI,sBAAMR,SAAU,SAAAC,GAAC,OAAID,EAASC,EAAGhF,IAAjC,SACI,gCACA,uBACIwF,KAAK,OACLxF,MAAOA,EACPP,UAAWC,IAAO+F,QAClBC,YAAY,kBACZC,SAAU,SAACC,GACP9B,EAAS8B,EAAMC,OAAO7F,gBAMtC,sBAAKP,UAAWC,IAAOoG,gBAAvB,UACA,qBAAKrG,UAAWW,EAAQsC,OAAS,EAAIhD,IAAOqG,OAAS,IAAMrG,IAAOsG,cAAgBtG,IAAOqG,OAAS,IAAMrG,IAAOuG,eAAgBhG,QAC3H,WACI8D,EAAW,KAFnB,SAKI,qBAAKmC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAApC,SAAgD,sBAAMC,EAAE,2UAE5D,qBAAK5G,UAAWW,EAAQsC,OAAS,EAAIhD,IAAOqG,OAAS,IAAMrG,IAAOsG,cAAgBtG,IAAOqG,OAAS,IAAMrG,IAAOuG,eAAgBhG,QAAO,sBAAE,gCAAApB,EAAA,4DAEpH,+DAENyH,EAAO,CACTC,SAAU,GACVxE,KAAM3B,GANsH,SAS3GqE,IAAM+B,IAPf,+DAOwBF,GAT4F,OAS1H3B,EAT0H,OAW1H8B,EAAUtC,OAAOC,SAASC,KAAKC,OAAO,EAAGH,OAAOC,SAASC,KAAKE,YAAY,MAAQ,IACxFmC,IAAKD,EAAU9B,EAAOC,KAAK+B,QAZqG,2CAAxI,SAaO,qBAAKT,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAApC,SAAgD,sBAAMC,EAAE,swBAC3D,qBACI5G,UAAWO,EAAM0C,OAAS,IACzBtC,EAAQgF,KAAI,SAAAC,GAAI,OAAIA,EAAKF,QAAQ,IAAK,OAAKG,SAAStF,EAAMmF,QAAQ,IAAK,KACxEzF,IAAOqG,OAAS,IAAMrG,IAAOsG,cAAgBtG,IAAOqG,OAAS,IAAMrG,IAAOuG,eAC1EhG,QAAS,SAAA+E,GAAC,OAAID,EAASC,EAAGhF,IAJ9B,SAKI,qBAAKkG,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAApC,SAAgD,sBAAMC,EAAE,mDAC5D,qBAAK5G,UAAWW,EAAQsC,OAAS,GAAM1C,EAAM0C,OAAS,GAAKtC,EAAQsC,OAAS,EAAKhD,IAAOqG,OAAS,IAAMrG,IAAOsG,cAAgBtG,IAAOqG,OAAS,IAAMrG,IAAOuG,eAAgBhG,QAAS,SAAA+E,GAC3K5E,EAAQgF,KAAI,SAAAC,GAAI,OAAIA,EAAKF,QAAQ,IAAK,OAAKG,SAAStF,EAAMmF,QAAQ,IAAK,OACpEnF,EAAM0C,OAAS,GACfqC,EAASC,EAAGhF,GACZiE,GAA4B,IACrB7D,EAAQsC,OAAS,GACxBuB,GAA4B,KANxC,SASG,qBAAKiC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAApC,SAAgD,sBAAMC,EAAE,uGAE/D,qBAAK5G,UAAWC,IAAOkH,eAAvB,SACKxG,EAAQgF,KAAI,SAACpF,EAAOiC,GAAR,OAAc,cAAC4E,EAAD,CAAsB7G,MAAOA,EAAO8G,SAAU,WACrE/C,EAAW3D,EAAQ2G,QAAO,SAAAC,GAAK,OAAIA,IAAUhH,QADHiC,WAQ9D,SAAS4E,EAAT,GAA0C,IAAnB7G,EAAkB,EAAlBA,MAAO8G,EAAW,EAAXA,SAC1B,OACI,sBAAKrH,UAAWC,IAAOsH,MAAvB,UACKhH,EACD,cAACiH,EAAD,CAAYH,SAAUA,OAKlC,SAASG,EAAT,GAAiC,IAAZH,EAAW,EAAXA,SACjB,OACI,qBAAKrH,UAAWC,IAAOwH,QAASjH,QAAS6G,EAAUV,QAAQ,YAA3D,SACI,sBAAMC,EAAE,woB,oBCnHL,SAASc,EAAT,GAAoD,IAAlCC,EAAiC,EAAjCA,QAAStG,EAAwB,EAAxBA,MAAOF,EAAiB,EAAjBA,eAC7C,EAAoCD,mBAAS,IAA7C,mBAAO0G,EAAP,KAAmBC,EAAnB,KACA,EAA0D3G,mBAAS,IAAnE,mBAAO4G,EAAP,KAA8BC,EAA9B,KAEMrI,EAAcsC,uBAAY,SAAAzB,GAC5B,IAAIK,EAAOgH,EAAW7E,QAEtB,GAAKnC,EAAKiF,SAAStF,GA0Cf,GAAoB,IAAhBK,EAAKqC,OAAc,CACnB,IAAM+E,EAAYpH,EAAK,KAAOL,EAAQK,EAAK,GAAKA,EAAK,GACrDiH,EAAc,CAACG,IACfD,EAAyB,SAEzBF,EAAc,IACdE,EAAyB,SAzC7B,GANInH,EAAKqC,OAAS,GACdrC,EAAKqH,MAETrH,EAAKsH,KAAK3H,GACVsH,EAAcjH,GAEM,IAAhBA,EAAKqC,OAAc,CACnB,IAAMkF,EAAiBR,EAAQS,QAAQxH,EAAK,IACtCyH,EAAkBV,EAAQS,QAAQxH,EAAK,IAEvC0H,EAAkB1I,KAAK0D,IAAI6E,EAAgBE,GAC3CE,EAAiB3I,KAAK4I,IAAIL,EAAgBE,GAE1CI,EHWf,SAAsBpH,EAAOqH,EAAQtC,GACxC,IAAIuC,EAAU,GACd,IAAK,IAAMC,KAAQvH,EACfsH,EAAQC,IAAQ,EAEpBD,EAAQD,IAAU,EASlB,IAPA,IAAIG,EAAS,CACTH,OAAQ,MAGRI,EAAQ,CAACJ,GAXmC,aAe5C,IAAMK,EAAUD,EAAME,QAGlBC,EAA2B,GAC/B,IAAK,IAAML,KAAQvH,EAAM0H,IAChBJ,EAAQC,IAASpJ,EAAauJ,EAASH,EAAMvH,IAC9C4H,EAAyBf,KAAKU,GAItCK,EAAyBpI,SAAQ,SAAA+H,GAC7BC,EAAOD,GAAQG,EACfJ,EAAQC,IAAQ,EAChBE,EAAMZ,KAAKU,OAdZE,EAAM7F,OAAS,GAAI,IAsB1B,IAHA,IAAIwF,EAAO,GACPM,EAAU3C,EAEI,MAAX2C,GACHN,EAAKP,KAAKa,GACVA,EAAUF,EAAOE,GAIrB,OAFAN,EAAKS,UAEET,EGrDkBU,CAAa9H,EAAOsG,EAAQW,GAAkBX,EAAQY,IAEnE,GAAIE,EAAKxF,OAAS,EAAG,CAEjB,IADA,IAAImG,EAAY,GADC,WAER5G,GACL,IAAMuG,EAAUN,EAAKjG,GACf6G,EAAOZ,EAAKjG,EAAI,GAElBb,GAAkB,EACtBR,EAAeN,SAAQ,SAACiG,EAAUwC,IAEzBxC,EAAS,KAAOiC,GAAWjC,EAAS,KAAOuC,GAC3CvC,EAAS,KAAOuC,GAAQvC,EAAS,KAAOiC,KAEzCpH,EAAiB2H,MAIzB,IAAMC,EAAc,KAAO9I,OAAOkB,EAAiB,GAAK,cAAgBoH,EAAU,mBAAqBM,EAEjGG,EAAY,8BAAcD,GAAJ/G,GAC5B4G,EAAUlB,KAAKsB,IAjBVhH,EAAI,EAAGA,EAAIiG,EAAKxF,OAAS,IAAKT,EAAI,EAAlCA,GAoBTuF,EAAyBqB,OAetC,CAAC/H,EAAOF,EAAgBwG,EAASC,IAE9B6B,EAAoB,sBAAMzJ,UAAWC,IAAOyJ,oBAAxB,8EAE1B,OACI,sBAAK1J,UAAWC,IAAO2D,UAAvB,UACI,qBAAK+F,MAAO,CAACC,UAAW,UAAxB,SAAoCjC,EAAQhC,KAAI,SAACC,EAAMpD,GAAP,OAAa,cAACqH,EAAD,CAAetJ,MAAOqF,EAAclG,YAAaA,EAAaoK,WAAYlC,EAAW/B,SAASD,IAA7DpD,QAC9F,qBAAKxC,UAAWC,IAAO8J,cAAvB,SAAuCjC,EAAsB7E,OAAS,EAAI6E,EAAwB2B,OAK9G,SAASI,EAAT,GAA0D,IAAlCtJ,EAAiC,EAAjCA,MAAOb,EAA0B,EAA1BA,YACrBsK,EAD+C,EAAbF,WACN7J,IAAOK,QAAU,IAAML,IAAOgK,gBAAkBhK,IAAOK,QACzF,OAAO,qBAAKN,UAAWgK,EAAcxJ,QAAS,kBAAMd,EAAYa,IAAzD,SAAkEA,IC/C9D2J,MA1Bf,WACE,MAA8BhJ,mBAAS,IAAvC,mBAAOP,EAAP,KAAgB2D,EAAhB,KACA,EAA4CpD,mBAAS,IAArD,mBAAOiJ,EAAP,KAAuBC,EAAvB,KACA,EAA8BlJ,mBAAS,IAAvC,mBAAOyG,EAAP,KAAgB0C,EAAhB,KACA,EAA4CnJ,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOoJ,EAAP,KAAoBC,EAApB,KAEMC,EAAQ,CACZ,cAACrG,EAAD,CAAeC,kBAAmB,SAACzD,GACjC2D,EAAW3D,GACX4J,EAAeD,EAAc,KAFnB,GAIZ,cAACtJ,EAAD,CAAgBL,QAASA,EAASM,SAAU,SAACkJ,EAAgBxC,EAASxG,GACpEiJ,EAAkBD,GAClBE,EAAW1C,GACXvG,EAAkBD,GAClBoJ,EAAeD,EAAc,KAJlB,GAMb,cAAC5C,EAAD,CAAiBrG,MAAO8I,EAAgBxC,QAASA,EAASxG,eAAgBA,GAA5D,IAGhB,OAAO,qBAAKwI,MAAO,CAACc,gBAAiB,WAA9B,SACJD,EAAMF,MCfII,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfA5L,EAAOC,QAAU,CAAC,UAAY,2BAA2B,cAAgB,+BAA+B,oBAAsB,qCAAqC,QAAU,yBAAyB,gBAAkB,oC","file":"static/js/main.cf1d3a0a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pair\":\"Pair_pair__1uvFo\",\"element\":\"Pair_element__2OFIl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Ranker_container__2JUBj\",\"progressIndicator\":\"Ranker_progressIndicator__1t-CV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Input_container__28Gjd\",\"textboxContainer\":\"Input_textboxContainer__2T9WY\",\"textbox\":\"Input_textbox__1NzHg\",\"buttonContainer\":\"Input_buttonContainer__1mUlt\",\"button\":\"Input_button__3BVPK\",\"disabledButton\":\"Input_disabledButton__2a1xB\",\"enabledButton\":\"Input_enabledButton__2WV2x\",\"entryContainer\":\"Input_entryContainer__3nS9O\",\"entry\":\"Input_entry__3TZ3X\",\"svgIcon\":\"Input_svgIcon__LjQkP\"};","module.exports = {\n    BETTER: 1,\n    WORSE: 0,\n    NOT_COMPARED: -1\n}","import Constants from '../Constants';\n\nexport function iterativeMergeSort(arr, comparisonGraph) {\n    /*\n    super inefficient way but will do for MVP\n    if (canCompare(a, b)) then run comparison; otherwise just break and return the last comparison broken on\n    show that\n    */\n    // https://stackoverflow.com/questions/32041092/implementing-merge-sort-iteratively\n\n    /*\n     * TODO: Refactor this sort to modern styling and use state variables so that this can\n     * be paused and resumed as the user fills comparisons in\n     */\n\n    let sorted = arr.slice();\n    let n = sorted.length;\n    let buffer = new Array(n);\n\n    for (let size = 1; size < n; size *= 2) {\n        for (let leftStart = 0; leftStart < n; leftStart += 2 * size) {\n            let left = leftStart;\n            let right = Math.min(left + size, n);\n            let leftLimit = right;\n            let rightLimit = Math.min(right + size, n)\n            let i = left;\n\n            while (left < leftLimit && right < rightLimit) {\n                if (canCompare(sorted[left], sorted[right], comparisonGraph)) {\n                    if (isBetterThan(sorted[left], sorted[right], comparisonGraph)) {\n                        buffer[i++] = sorted[left++];\n                    } else {\n                        buffer[i++] = sorted[right++];\n                    }\n                } else {\n                    return {\n                        array: sorted,\n                        nextQuestion: [sorted[left], sorted[right]]\n                    }\n                }\n\n            }\n\n            while (left < leftLimit) {\n                buffer[i++] = sorted[left++];\n            }\n\n            while (right < rightLimit) {\n                buffer[i++] = sorted[right++];\n            }\n        }\n\n        let temp = sorted;\n        sorted = buffer;\n        buffer = temp;\n    }\n  \n    return {\n        array: sorted,\n        nextQuestion: null\n    };\n}\n\nexport function canCompare(a, b, comparisonGraph) {\n    return comparisonGraph[a][b] !== Constants.NOT_COMPARED;\n}\n\nexport function isWorseThan(a, b, comparisonGraph) {\n    return comparisonGraph[a][b] === Constants.WORSE;\n}\n\nexport function isBetterThan(a, b, comparisonGraph) {\n    return comparisonGraph[a][b] === Constants.BETTER;\n}","import styles from './Pair.module.css';\n\nexport default function Pair({a, b, onSelection}) {\n    const willFlip = Math.random() < 0.5;\n    const left = willFlip ? a : b;\n    const right = willFlip ? b : a;\n    return (\n        <div className={styles.pair}>\n            <Element rendered={left} other={right} onSelection={onSelection} />\n            <Element rendered={right} other={left} onSelection={onSelection} />\n        </div>\n    );\n\n}\n\nfunction Element({rendered, other, onSelection}) {\n    return <span\n    className={styles.element}\n    value={rendered} onClick={() => onSelection(rendered, other)}>\n        {String(rendered)}\n    </span>\n};","import Constants from '../Constants';\nimport {isBetterThan} from './sortUtils';\n\nexport function computeTransitiveClosure(graph, list) {\n    let closure = generateEmptyGraph(list);\n\n    for (const i in graph) {\n        for (const j in graph) {\n            closure[i][j] = graph[i][j];\n        }\n    }\n\n    for (const k in graph) {\n        for (const i in graph) {\n            for (const j in graph) {\n                closure[i][j] = (closure[i][j] === Constants.BETTER) || (closure[i][k] === Constants.BETTER && closure[k][j] === Constants.BETTER) ? Constants.BETTER : graph[i][j];\n            }\n        }\n    }\n\n    return closure;\n}\n\nexport function generateEmptyGraph(entries) {\n    let temp = {}\n    entries.forEach(p1 => {\n        temp[p1] = {};\n\n        entries.forEach(p2 => {\n            temp[p1][p2] = Constants.NOT_COMPARED;\n        })\n    })\n\n    return temp;\n}\n\nexport function shortestPath(graph, source, target) {\n    let visited = {};\n    for (const team in graph) {\n        visited[team] = false;\n    }\n    visited[source] = true;\n\n    let parent = {\n        source: null\n    };\n\n    let queue = [source];\n    \n    // generate shortest path from source to everywhere else\n    while (queue.length > 0) {\n        const current = queue.shift();\n\n        // gather children\n        let teamsCurrentIsBetterThan = [];\n        for (const team in graph[current]) {\n            if (!visited[team] && isBetterThan(current, team, graph)) {\n                teamsCurrentIsBetterThan.push(team);\n            }\n        }\n\n        teamsCurrentIsBetterThan.forEach(team => {\n            parent[team] = current;\n            visited[team] = true;\n            queue.push(team);\n        })\n    }\n\n    // find path from source to target\n    let path = [];\n    let current = target;\n\n    while (current != null) {\n        path.push(current);\n        current = parent[current];\n    }\n    path.reverse();\n\n    return path;\n}\n\n","import { useState, useEffect, useCallback } from 'react';\nimport { iterativeMergeSort } from '../utils/sortUtils';\nimport React from 'react';\nimport Constants from '../Constants';\nimport Pair from '../Pair/Pair';\nimport {computeTransitiveClosure, generateEmptyGraph} from '../utils/graphUtils';\nimport styles from './Ranker.module.css';\n\nexport default function Ranker({entries, onFinish}) {\n    let [questionsAsked, setQuestionsAsked] = useState([]);\n    let [graph, setGraph] = useState(generateEmptyGraph(entries));\n    let [responses, setResponses] = useState(generateEmptyGraph(entries));\n    let [currentQuestion, setCurrentQuestion] = useState(null);\n    let [questionNumber, setQuestionNumber] = useState(1);\n    let [doneRanking, setDoneRanking] = useState(false);\n\n    // get response graph callback\n    const updateResponseGraph = useCallback((better, worse) => {\n        let tempResponses = {\n            ...responses\n        }\n\n        tempResponses[better][worse] = Constants.BETTER;\n        tempResponses[worse][better] = Constants.WORSE;\n\n        setResponses(responses);\n    }, [responses]);\n\n    // get transitive closure graph callback\n    const updateTransitiveClosureGraph = useCallback((better, worse) => {\n        let tempGraph = {\n            ...graph\n        }\n\n        tempGraph[better][worse] = Constants.BETTER;\n        tempGraph[worse][better] = Constants.WORSE;\n\n        tempGraph = computeTransitiveClosure(tempGraph, entries);\n        setGraph(tempGraph);\n    }, [entries, graph]);\n\n    // get update callback\n    const onSelection = useCallback((better, worse) => {\n        updateResponseGraph(better, worse);\n        updateTransitiveClosureGraph(better, worse);\n        setQuestionsAsked([...questionsAsked, [better, worse]]);\n        setQuestionNumber(questionNumber + 1);\n    }, [questionNumber, questionsAsked, updateResponseGraph, updateTransitiveClosureGraph]);\n\n    // ask questions\n    useEffect(() => {\n        let {array, nextQuestion} = iterativeMergeSort(entries, graph);\n        \n        if (nextQuestion != null) {\n            setCurrentQuestion(<Pair a={nextQuestion[0]} b={nextQuestion[1]} onSelection={onSelection} />)\n        } else {\n            setDoneRanking(true);\n            onFinish(responses, array, questionsAsked);\n        }\n    }, [graph, questionNumber, onSelection, responses, entries, onFinish, questionsAsked]);\n\n    return (\n        <>\n            <div className={styles.container}>\n                {currentQuestion}\n                <ProgressIndicator questionNumber={questionNumber} n={entries.length} doneRanking={doneRanking}/>\n            </div>\n        </>\n    );\n}\n\nfunction ProgressIndicator({questionNumber, n, doneRanking}) {\n    if (doneRanking) {\n        return null;\n    }\n\n    // https://stackoverflow.com/questions/12346054/number-of-comparisons-in-merge-sort\n    const log = Math.ceil(Math.log2(n));\n    const maxNumberOfQuestions = n * log - 2 ** log + 1;\n    return <div className={styles.progressIndicator}>{questionNumber} out of up to {maxNumberOfQuestions}</div>\n}","import { useState, useCallback, useEffect } from 'react';\nimport styles from './Input.module.css';\nimport axios from 'axios';\nimport copy from 'copy-to-clipboard';\n\nexport default function Input({onFinalizeEntries}) {\n\n    const [value, setValue] = useState('');\n    const [entries, setEntries] = useState([]);\n    const [hasUserFinalizedRankings, setHasUserFinalizedRankings] = useState(false);\n\n    // if user came from shared link then fill in list\n    useEffect(() => {\n        async function putNewList() {\n            const listID = window.location.href.substr(window.location.href.lastIndexOf('/') + 1);\n\n            if (listID.length > 0) {\n                const getURI = 'https://3ocshrauf1.execute-api.us-west-1.amazonaws.com/lists/' + listID;\n                const result = await axios.get(getURI);\n                const list = result.data?.Item?.list ?? [];\n                setEntries(list);\n            }\n        }\n\n        putNewList();\n    }, []);\n\n    useEffect(() => {\n        if (hasUserFinalizedRankings) {\n            onFinalizeEntries(entries);\n        }\n    }, [entries, hasUserFinalizedRankings, onFinalizeEntries])\n\n    const onSubmit = useCallback((e, value) => {\n        e.preventDefault();\n        const spaceLessValue = value.replace(' ', '');\n        if (!entries.map(term => term.replace(' ', '')).includes(spaceLessValue) && spaceLessValue.length > 0) {\n            setEntries([...entries, value]);\n            setValue('');\n        }\n    }, [entries]);\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.textboxContainer}>\n                <form onSubmit={e => onSubmit(e, value)}>\n                    <label>\n                    <input\n                        type=\"text\"\n                        value={value}\n                        className={styles.textbox}\n                        placeholder=\"Enter item here\"\n                        onChange={(event) => {\n                            setValue(event.target.value)\n                        }}\n                    />\n                    </label>\n                </form>\n            </div>\n            <div className={styles.buttonContainer}>\n            <div className={entries.length > 0 ? styles.button + ' ' + styles.enabledButton : styles.button + ' ' + styles.disabledButton} onClick={\n                () => {\n                    setEntries([]);\n                }\n            }>\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M9 19c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm4 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm4 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm5-17v2h-20v-2h5.711c.9 0 1.631-1.099 1.631-2h5.315c0 .901.73 2 1.631 2h5.712zm-3 4v16h-14v-16h-2v18h18v-18h-2z\"/></svg>\n            </div>\n            <div className={entries.length > 1 ? styles.button + ' ' + styles.enabledButton : styles.button + ' ' + styles.disabledButton} onClick={async () => {\n                    // generate shared link\n                    const url = 'https://3ocshrauf1.execute-api.us-west-1.amazonaws.com/lists';\n            \n                    const body = {\n                        question: '',\n                        list: entries\n                    };\n\n                    const result = await axios.put(url, body);\n\n                    const baseURL = window.location.href.substr(0, window.location.href.lastIndexOf('/')) + '/';\n                    copy(baseURL + result.data.new_id);\n                }}><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></div>\n                <div\n                    className={value.length > 0 &&\n                    !entries.map(term => term.replace(' ', '')).includes(value.replace(' ', '')) ?\n                    styles.button + ' ' + styles.enabledButton : styles.button + ' ' + styles.disabledButton}\n                    onClick={e => onSubmit(e, value)}>\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M24 10h-10v-10h-4v10h-10v4h10v10h4v-10h10z\"/></svg></div>\n                <div className={entries.length > 1 || (value.length > 0 && entries.length > 0) ? styles.button + ' ' + styles.enabledButton : styles.button + ' ' + styles.disabledButton} onClick={e => {\n                    if (!entries.map(term => term.replace(' ', '')).includes(value.replace(' ', ''))) {\n                        if (value.length > 0) {\n                            onSubmit(e, value);\n                            setHasUserFinalizedRankings(true);\n                        } else if (entries.length > 1) {\n                            setHasUserFinalizedRankings(true);\n                        }\n                    }\n                }}><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M13.025 1l-2.847 2.828 6.176 6.176h-16.354v3.992h16.354l-6.176 6.176 2.847 2.828 10.975-11z\"/></svg></div>\n            </div>\n            <div className={styles.entryContainer}>\n                {entries.map((value, i) => <InputElement key={i} value={value} onRemove={() => {\n                    setEntries(entries.filter(entry => entry !== value));\n                }} />)}\n            </div>\n        </div>\n    );\n}\n\nfunction InputElement({value, onRemove}) {\n    return (\n        <div className={styles.entry}>\n            {value}\n            <DeleteIcon onRemove={onRemove} />\n        </div>\n    );\n}\n\nfunction DeleteIcon({onRemove}) {\n    return (\n        <svg className={styles.svgIcon} onClick={onRemove} viewBox=\"0 0 20 20\">\n            <path d=\"M10.185,1.417c-4.741,0-8.583,3.842-8.583,8.583c0,4.74,3.842,8.582,8.583,8.582S18.768,14.74,18.768,10C18.768,5.259,14.926,1.417,10.185,1.417 M10.185,17.68c-4.235,0-7.679-3.445-7.679-7.68c0-4.235,3.444-7.679,7.679-7.679S17.864,5.765,17.864,10C17.864,14.234,14.42,17.68,10.185,17.68 M10.824,10l2.842-2.844c0.178-0.176,0.178-0.46,0-0.637c-0.177-0.178-0.461-0.178-0.637,0l-2.844,2.841L7.341,6.52c-0.176-0.178-0.46-0.178-0.637,0c-0.178,0.176-0.178,0.461,0,0.637L9.546,10l-2.841,2.844c-0.178,0.176-0.178,0.461,0,0.637c0.178,0.178,0.459,0.178,0.637,0l2.844-2.841l2.844,2.841c0.178,0.178,0.459,0.178,0.637,0c0.178-0.176,0.178-0.461,0-0.637L10.824,10z\"></path>\n        </svg>\n    );\n}","import {useState, useCallback} from 'react';\nimport {shortestPath} from '../utils/graphUtils';\nimport styles from './Results.module.css';\n\nexport default function Results({results, graph, questionsAsked}) {\n    const [selections, setSelections] = useState([]);\n    const [pathBetweenSelections, setPathBetweenSelections] = useState([]);\n\n    const onSelection = useCallback(value => {\n        let temp = selections.slice();\n\n        if (!temp.includes(value)) {\n            if (temp.length > 1) {\n                temp.pop();\n            }\n            temp.push(value);\n            setSelections(temp);\n            \n            if (temp.length === 2) {\n                const firstTermIndex = results.indexOf(temp[0]);\n                const secondTermIndex = results.indexOf(temp[1]);\n        \n                const betterTermIndex = Math.min(firstTermIndex, secondTermIndex);\n                const worseTermIndex = Math.max(firstTermIndex, secondTermIndex);\n                \n                const path = shortestPath(graph, results[betterTermIndex], results[worseTermIndex]);\n        \n                if (path.length > 1) {\n                    let pathArray = []\n                    for (let i = 0; i < path.length - 1; ++i) {\n                        const current = path[i];\n                        const next = path[i + 1];\n\n                        let questionNumber = -1;\n                        questionsAsked.forEach((question, index) => {\n                            if (\n                                (question[0] === current && question[1] === next) ||\n                                (question[0] === next && question[1] === current)\n                            ) {\n                                questionNumber = index;\n                            }\n                        });\n\n                        const pathString = ('(Q' + String(questionNumber + 1) + ') You said ' + current + ' is better than ' + next);\n\n                        const pathEntry = <div key={i}>{pathString}</div>\n                        pathArray.push(pathEntry);\n                    }\n\n                    setPathBetweenSelections(pathArray);\n                }\n            }\n        } else {\n            if (temp.length === 2) {\n                const otherTerm = temp[0] === value ? temp[1] : temp[0];\n                setSelections([otherTerm]);\n                setPathBetweenSelections([]);\n            } else {\n                setSelections([]);\n                setPathBetweenSelections([]);\n            }\n        }\n        \n\n    }, [graph, questionsAsked, results, selections]);\n\n    const fillerExplanation = <span className={styles.fillerJustification}>Click any pair of terms to learn why one's higher than the other</span>\n\n    return (\n        <div className={styles.container}>\n            <div style={{textAlign: \"center\"}}>{results.map((term, i) => <ResultElement value={term} key={i} onSelection={onSelection} isSelected={selections.includes(term)}/>)}</div>\n            <div className={styles.justification}>{pathBetweenSelections.length > 0 ? pathBetweenSelections : fillerExplanation}</div>\n        </div>\n    )\n}\n\nfunction ResultElement({value, onSelection, isSelected}) {\n    const colorClasses = isSelected ? styles.element + ' ' + styles.selectedElement : styles.element;\n    return <div className={colorClasses} onClick={() => onSelection(value)}>{value}</div>\n}","import Ranker from './Ranker/Ranker';\nimport Input from './Input/Input';\nimport Results from './Results/Results';\nimport {useState} from 'react'\n\nfunction App() {\n  const [entries, setEntries] = useState([]);\n  const [responsesGraph, setResponsesGraph] = useState({});\n  const [results, setResults] = useState([]);\n  const [questionsAsked, setQuestionsAsked] = useState([]);\n  const [currentPage, setCurrentPage] = useState(0);\n\n  const pages = [\n    <Input key={0} onFinalizeEntries={(entries) => {\n      setEntries(entries);\n      setCurrentPage(currentPage + 1);\n    }}/>,\n    <Ranker key={1} entries={entries} onFinish={(responsesGraph, results, questionsAsked) => {\n      setResponsesGraph(responsesGraph);\n      setResults(results);\n      setQuestionsAsked(questionsAsked);\n      setCurrentPage(currentPage + 1);\n    }}/>,\n    <Results key={2} graph={responsesGraph} results={results} questionsAsked={questionsAsked}/>\n  ]\n\n  return <div style={{backgroundColor: '#111111'}}>\n    {pages[currentPage]}\n  </div>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Results_container__1V5Wh\",\"justification\":\"Results_justification__2wW9v\",\"fillerJustification\":\"Results_fillerJustification__17IxO\",\"element\":\"Results_element__28VKJ\",\"selectedElement\":\"Results_selectedElement__2svSd\"};"],"sourceRoot":""}